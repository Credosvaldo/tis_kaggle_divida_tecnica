{"cells":[{"metadata":{"_uuid":"fab4f3675609639f5d2965328723287d6030b409","_execution_state":"idle","trusted":true},"cell_type":"code","source":"cat(\"Loading libraries...\\n\")\nlibrary(data.table)\nlibrary(caret)\nlibrary(lightgbm)\nlibrary(pROC)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"63b7cec4bf54335fdacfeb50e6d19d07c3ac4e31"},"cell_type":"code","source":"cat(\"Loading data...\\n\")\ntrainX <- fread(\"../input/train.csv\")\ntestX <- fread(\"../input/test.csv\")\n\ntrainY <- trainX$target\ntrainX <- trainX[, !c(\"target\", \"ID_code\"), with = F]\ntestX <- testX[, !c(\"ID_code\"), with = F]\ndataX <- rbind(trainX, testX)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"bd86384919ae7b482dacfda3ba52a0367259a9c5"},"cell_type":"code","source":"cat(\"New features generation...\\n\")\ncat_names <- function(round_limit = 0,\n                      limit_levels = 10) {\n    unique_len_ <-\n        sapply(dataX[, colnames(trainX), with = F], function(x)\n            length(unique(round(x, round_limit))))\n    unique_len_ <- data.frame(\n        v = names(unique_len_),\n        len = unique_len_,\n        row.names = NULL,\n        stringsAsFactors = F\n    )\n    unique_len_ <-\n        unique_len_[order(unique_len_$len, decreasing = F), ]\n    cat(paste(\"Count new categorical var\", nrow(unique_len_[unique_len_$len < limit_levels &\n                                                        unique_len_$len > 1,])))\n    if (nrow(unique_len_[unique_len_$len < limit_levels &\n                         unique_len_$len > 1,]) > 0) {\n        cat_var <-\n            unique_len_[unique_len_$len < limit_levels &\n                            unique_len_$len > 1, \"v\"]\n        cat(\"\\n\")\n        return(cat_var)\n    }\n}\n\nnames_0 <- cat_names(0, 5)\nnew_names_0 <- paste0(names_0, \"_0\")\ndataX[, (new_names_0) := lapply(dataX[, names_0, with = F], function(x)\n    as.integer(factor(round(x, 0))))]\n\nnames_1 <- cat_names(1, 20)\nnew_names_1 <- paste0(names_1, \"_1\")\ndataX[, (new_names_1) := lapply(dataX[, names_1, with = F], function(x)\n    as.integer(factor(round(x, 1))))]\n\nnames_2 <- cat_names(2, 20)\nnew_names_2 <- paste0(names_2, \"_2\")\ndataX[, (new_names_2) := lapply(dataX[, names_2, with = F], function(x)\n    as.integer(factor(round(x, 2))))]\nhead(dataX)\n\ntrainX <- head(dataX, nrow(trainX))\ntestX <- tail(dataX, nrow(testX))\ncategorical_features <- c(new_names_0, new_names_1, new_names_2)\n\nrm(dataX)\ngc()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"2804d815e10ac8669d85a1320ada9e5777518780"},"cell_type":"code","source":"cat(\"Folds preparation...\\n\")\nfold_num <- 10\nset.seed(123)\nfolds = createFolds(factor(trainY), k = fold_num, list = FALSE)\n\n# vectors to save AUC to validation fold and predictions on test \nAUC_valid_folds <- vector(mode = \"numeric\",  length = fold_num)\npred_test_folds <- vector(mode=\"list\", length = fold_num)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"14142c7ee8ddee7b83d520e38022c1c740532d38"},"cell_type":"code","source":"cat(\"Modeling and prediction...\\n\")\nfor (fld in 1:fold_num) {\n    cat(paste0(\"Fold number \", fld, \"...\\n\"))\n    dtrain <- lgb.Dataset(data = as.matrix(trainX[folds != fld, ]), label = as.matrix(trainY[folds != fld]), categorical_feature = categorical_features)\n    dvalid <- lgb.Dataset(data = as.matrix(trainX[folds == fld, ]), label = as.matrix(trainY[folds == fld]), categorical_feature = categorical_features)\n    \n    lgb_params <- list(objective = \"binary\", \n                       boost=\"gbdt\",\n                       metric=\"auc\",\n                       boost_from_average=\"false\",\n                       num_threads=4,\n                       learning_rate = 0.01,\n                       num_leaves = 13,\n                       max_depth=-1, # max_depth=-1,\n                       tree_learner = \"serial\",\n                       feature_fraction = 0.05,\n                       bagging_freq = 5,\n                       bagging_fraction = 0.4,\n                       min_data_in_leaf = 80,\n                       min_sum_hessian_in_leaf = 10.0,\n                       verbosity = -1)\n    \n    lgb_model = lgb.train(params = lgb_params,\n                          data = dtrain,\n                          nrounds = 1000000,\n                          list(val = dvalid),\n                          eval_freq = 1000, \n                          eval = \"auc\",\n                          early_stopping_rounds = 3000,\n                          seed = 44000\n                          )\n    \n    pred_valid <- predict(lgb_model, as.matrix(trainX[folds == fld, ]))\n    roc_obj <- roc(response = trainY[folds == fld], pred_valid)\n    AUC_valid_folds[fld] <- auc(roc_obj)\n    cat(paste0(\"Auc \", AUC_valid_folds[fld], \"\\n\"))\n    test_pred <- predict(lgb_model, as.matrix(testX))\n    pred_test_folds[[fld]] <- test_pred\n    }\ncat(paste(\"Average AUC\", round(mean(AUC_valid_folds),5)))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"043e7a33a0c59b7650a1ebc1f2a9a514609b5cc2"},"cell_type":"code","source":"cat(\"Rank mean...\")\nfinal_pred <- rowMeans(sapply(pred_test_folds, rank))","execution_count":null,"outputs":[]},{"metadata":{"trusted":true,"_uuid":"416c1a3cfdad5602a178dd87120c78d05729d2a3"},"cell_type":"code","source":"cat(\"Submission...\")\nsubmission <- read.csv(\"../input/sample_submission.csv\")\nsubmission$target <- final_pred\nwrite.csv(submission, file=\"submission_LGBM.csv\", row.names=F)","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"display_name":"R","language":"R","name":"ir"},"language_info":{"mimetype":"text/x-r-source","name":"R","pygments_lexer":"r","version":"3.4.2","file_extension":".r","codemirror_mode":"r"}},"nbformat":4,"nbformat_minor":1}